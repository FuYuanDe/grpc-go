5.2. 流量控制
使用流进行多路复用会引起对 TCP 连接使用的争用，从而导致流被阻塞。 流量控制方案确保同一连接上的流不会破坏性地相互干扰。 流控制用于单个流和整个连接。

HTTP/2 通过使用 WINDOW_UPDATE 框架（第 6.9 节）提供流量控制。

5.2.1. 流量控制原则
HTTP/2 流控制旨在允许在不需要更改协议的情况下使用各种流控制算法。 HTTP/2 中的流量控制具有以下特点：

流量控制特定于连接。 两种类型的流量控制都在单跳的端点之间，而不是在整个端到端路径上。
流量控制基于 WINDOW_UPDATE 帧。 接收者通告他们准备在流上和整个连接中接收多少个字节。 这是一个基于信用的计划。
流量控制是定向的，由接收方提供整体控制。 接收者可以选择为每个流和整个连接设置它想要的任何窗口大小。 发送方必须尊重接收方强加的流量控制限制。 客户端、服务器和中介都独立地将其流量控制窗口公布为接收方，并在发送时遵守其对等方设置的流量控制限制。
流量控制窗口的初始值为新流和整体连接的 65,535 个字节。
帧类型决定了流量控制是否适用于帧。 在本文档中指定的帧中，只有数据帧受流量控制； 所有其他帧类型不占用广告流控制窗口中的空间。 这确保了重要的控制帧不会被流量控制阻塞。
无法禁用流量控制。
HTTP/2 仅定义了 WINDOW_UPDATE 框架的格式和语义（第 6.9 节）。 本文档没有规定接收方如何决定何时发送此帧或它发送的值，也没有指定发送方如何选择发送数据包。 实现能够选择适合他们需要的任何算法。
实现还负责管理如何根据优先级发送请求和响应，选择如何避免请求的队头阻塞，以及管理新流的创建。 这些算法的选择可以与任何流控制算法交互。

5.2.2. 适当使用流量控制
流量控制被定义为保护在资源限制下运行的端点。 例如，一个代理需要在许多连接之间共享内存，并且还可能有一个慢速的上游连接和一个快速的下游连接。 流量控制解决了接收方无法处理一个流上的数据但希望继续处理同一连接中的其他流的情况。

不需要此功能的部署可以通告最大大小 (2^31-1) 的流量控制窗口，并可以通过在收到任何数据时发送 WINDOW_UPDATE 帧来维护此窗口。 这有效地禁用了该接收器的流量控制。 相反，发送方始终受接收方通告的流量控制窗口的约束。

具有受限资源（例如，内存）的应用可以使用流量控制来限制对等点可以消耗的内存量。 但是请注意，如果在不知道bdp的情况下启用流量控制，这可能会导致可用网络资源的使用不佳（请参阅 [RFC7323]）。

即使充分了解当前的bdp，流量控制的实施也可能很困难。 使用流量控制时，接收方必须及时从 TCP 接收缓冲区读取数据。 如果不这样做，当关键帧（例如 WINDOW_UPDATE）未被读取和操作时，可能会导致死锁。




6.5.3 设置同步
SETTINGS 中的大多数值受益于或需要了解对等方何时收到并应用更改的参数值。 为了提供这样的同步时间点，未设置 ACK 标志的 SETTINGS 帧的接收者必须在收到后尽快应用更新的参数。

SETTINGS 帧中的值必须按照它们出现的顺序进行处理，值之间没有其他帧处理。 必须忽略不受支持的参数。 一旦处理完所有值，接收方必须立即发出一个设置了 ACK 标志的 SETTINGS 帧。 在收到设置了 ACK 标志的 SETTINGS 帧后，更改参数的发送方可以依赖已应用的设置。

如果 SETTINGS 帧的发送者在合理的时间内没有收到确认，它可能会发出一个 SETTINGS_TIMEOUT 类型的连接错误（第 5.4.1 节）。

6.7 PING
ping frame主要用来测量rtt或者链接是否还在。ping frame的优先级应该高于其它所有frame, 接收端收到ping frame应该立即响应 ping ack frame。ping frame定义了一个标志位用于ack，
另外 ping frame payload长度为8，内容自定义。

6.8. GOAWAY

GOAWAY 帧（类型 = 0x7）用于启动连接关闭或发出严重错误情况的信号。 GOAWAY 允许端点优雅地停止接受新流，同时仍然完成对先前建立的流的处理。 这会启用管理操作，例如服务器维护。

在端点开始新流和远程发送 GOAWAY 帧之间存在固有的竞争条件。 为了处理这种情况，GOAWAY 包含最后一个对等发起的流的流标识符，该流已经或可能在此连接的发送端点上处理。 例如，如果服务器发送一个 GOAWAY 帧，则标识的流是客户端发起的编号最高的流。

一旦发送，如果流的标识符高于包含的最后一个流标识符，则发送方将忽略在接收方发起的流上发送的帧。 GOAWAY 帧的接收者不得在连接上打开额外的流，尽管可以为新流建立新连接。

如果 GOAWAY 的接收者在流上发送的数据具有比 GOAWAY 帧中指示的更高的流标识符，则这些流不会或不会被处理。 GOAWAY 帧的接收者可以将流视为从未创建过，从而允许稍后在新连接上重试这些流。

端点应该总是在关闭连接之前发送一个 GOAWAY 帧，以便远程对等方可以知道流是否已被部分处理。 例如，如果 HTTP 客户端在服务器关闭连接的同时发送 POST，如果服务器不发送 GOAWAY 帧以指示它可能具有哪些流，则客户端无法知道服务器是否开始处理该 POST 请求 采取行动。

一个端点可能会选择关闭连接而不为行为不端的对等方发送 GOAWAY。

GOAWAY 帧可能不会立即关闭连接； 不再使用连接的 GOAWAY 接收者应该在终止连接之前发送一个 GOAWAY 帧。

GOAWAY 框架没有定义任何标志。

GOAWAY 帧适用于连接，而不是特定的流。 端点必须将流标识符不是 0x0 的 GOAWAY 帧视为 PROTOCOL_ERROR 类型的连接错误（第 5.4.1 节）。

GOAWAY 帧中的最后一个流标识符包含编号最高的流标识符，GOAWAY 帧的发送者可能已经对其采取了一些行动或可能尚未采取行动。 可能已经以某种方式处理了直到并包括已识别流的所有流。 如果没有流被处理，最后的流标识符可以设置为 0。

注意：在这种情况下，“已处理”意味着流中的一些数据被传递到某个更高层的软件，这些软件可能因此采取了一些行动。

如果连接在没有 GOAWAY 帧的情况下终止，则最后一个流标识符实际上是最高可能的流标识符。

在连接关闭之前未完全关闭的具有较低或相同编号标识符的流上，不可能重新尝试请求、事务或任何协议活动，但 HTTP GET、PUT 或 DELETE 等幂等操作除外。 任何使用更高编号流的协议活动都可以使用新连接安全地重试。
编号小于或等于最后一个流标识符的流上的活动可能仍会成功完成。 GOAWAY 帧的发送者可以通过发送 GOAWAY 帧优雅地关闭连接，将连接保持在“打开”状态，直到所有正在进行的流完成。

如果情况发生变化，端点可以发送多个 GOAWAY 帧。 例如，在正常关闭期间发送带有 NO_ERROR 的 GOAWAY 的端点随后可能会遇到需要立即终止连接的情况。 接收到的最后一个 GOAWAY 帧的最后一个流标识符指示可以对哪些流采取行动。 端点不得增加它们在最后一个流标识符中发送的值，因为对等点可能已经在另一个连接上重试了未处理的请求。

无法重试请求的客户端会在服务器关闭连接时丢失所有正在进行的请求。 对于可能不使用 HTTP/2 为客户端提供服务的中介来说尤其如此。 试图正常关闭连接的服务器应该发送一个初始 GOAWAY 帧，其中最后一个流标识符设置为 231-1 和一个 NO_ERROR 代码。 这向客户端发出即将关闭并且禁止发起进一步请求的信号。 在为任何飞行中的流创建留出时间（至少一个往返时间）后，服务器可以发送另一个带有更新的最后一个流标识符的 GOAWAY 帧。 这确保可以干净地关闭连接而不会丢失请求。

发送 GOAWAY 帧后，发送方可以丢弃由接收方发起的流的帧，这些流的标识符高于所识别的最后一个流。 但是，不能完全忽略任何改变连接状态的帧。 例如，必须对 HEADERS、PUSH_PROMISE 和 CONTINUATION 帧进行最少的处理，以确保为标头压缩维护的状态是一致的（参见第 4.3 节）； 类似地，数据帧必须计入连接流控制窗口。 未能处理这些帧可能会导致流量控制或报头压缩状态变得不同步。

GOAWAY 帧还包含一个 32 位错误代码（第 7 节），其中包含关闭连接的原因。

端点可以将不透明数据附加到任何 GOAWAY 帧的有效载荷。 附加调试数据仅用于诊断目的，不具有任何语义价值。 调试信息可能包含对安全或隐私敏感的数据。 记录的或以其他方式持久存储的调试数据必须有足够的保护措施以防止未经授权的访问。

6.9. WINDOW_UPDATE
WINDOW_UPDATE帧（type=0x8）用于实现流控； 有关概述，请参见第 5.2 节。

流控制在两个级别上运行：在每个单独的流上和在整个连接上。

两种类型的流量控制都是逐跳的，即仅在两个端点之间。 中介不在依赖连接之间转发 WINDOW_UPDATE 帧。 但是，任何接收方对数据传输的节流都会间接导致流量控制信息向原始发送方传播。

流量控制仅适用于被识别为受流量控制影响的帧。 在本文档中定义的帧类型中，这仅包括数据帧。 免于流量控制的帧必须被接受和处理，除非接收方无法分配资源来处理该帧。 如果接收方无法接受帧，则它可能会以 FLOW_CONTROL_ERROR 类型的流错误（第 5.4.2 节）或连接错误（第 5.4.1 节）进行响应。
WINDOW_UPDATE 帧的有效负载是一个保留位加上一个无符号的 31 位整数，指示发送方除了现有的流控制窗口之外还可以传输的八位字节数。 流量控制窗口增量的合法范围是 1 到 231-1 (2,147,483,647) 个八位字节。

WINDOW_UPDATE 框架没有定义任何标志。

WINDOW_UPDATE 帧可以特定于流或整个连接。 在前一种情况下，帧的流标识符指示受影响的流； 在后者中，值“0”表示整个连接是帧的主题。
接收方必须将接收到的流控制窗口增量为 0 的 WINDOW_UPDATE 帧视为 PROTOCOL_ERROR 类型的流错误（第 5.4.2 节）； 连接流控制窗口上的错误必须被视为连接错误（第 5.4.1 节）。

WINDOW_UPDATE 可以由发送带有 END_STREAM 标志的帧的对等方发送。 这意味着接收器可以在“半关闭（远程）”或“关闭”流上接收 WINDOW_UPDATE 帧。 接收方不得将此视为错误（参见第 5.1 节）。

接收流控制帧的接收者必须始终考虑其对连接流控制窗口的贡献，除非接收者将此视为连接错误（第 5.4.1 节）。 即使帧出错，这也是必要的。 发送方向流量控制窗口计数帧，但如果接收方不这样做，则发送方和接收方的流量控制窗口可能会变得不同。

长度不是 4 个八位字节的 WINDOW_UPDATE 帧必须被视为 FRAME_SIZE_ERROR 类型的连接错误（第 5.4.1 节）。

6.9.1. The Flow-Control Window
HTTP/2 中的流量控制是使用每个发送者在每个流上保留的窗口来实现的。 流量控制窗口是一个简单的整数值，表示允许发送方传输多少个八位字节的数据； 因此，它的大小是接收器缓冲能力的度量。

适用的流控窗口有两种：流流控窗口和连接流控窗口。 发送方不得发送长度超过接收方通告的任一流量控制窗口中可用空间的流量控制帧。 如果任一流控制窗口中没有可用空间，则可以发送带有 END_STREAM 标志设置的零长度帧（即空数据帧）。

对于流量控制计算，不计算 9 字节帧头。

发送流控帧后，发送方将两个窗口中的可用空间减少所传输帧的长度。

帧的接收者发送 WINDOW_UPDATE 帧，因为它消耗数据并释放流控制窗口中的空间。 为流级和连接级流量控制窗口发送单独的 WINDOW_UPDATE 帧。

接收 WINDOW_UPDATE 帧的发送方按照帧中指定的数量更新相应的窗口。

发送方不得允许流量控制窗口超过 231-1 个八位字节。 如果发送方收到导致流量控制窗口超过此最大值的 WINDOW_UPDATE，则它必须视情况终止流或连接。 对于流，发送方发送错误代码为 FLOW_CONTROL_ERROR 的 RST_STREAM； 对于连接，发送错误代码为 FLOW_CONTROL_ERROR 的 GOAWAY 帧。

来自发送方的流量控制帧和来自接收方的 WINDOW_UPDATE 帧彼此完全异步。 此属性允许接收方积极更新发送方保留的窗口大小，以防止流停止。

6.9.2. Initial Flow-Control Window Size
首次建立 HTTP/2 连接时，将创建新流，其初始流量控制窗口大小为 65,535 个八位字节。 连接流量控制窗口也是 65,535 个八位字节。 两个端点都可以通过在构成连接前言一部分的 SETTINGS 框架中包含 SETTINGS_INITIAL_WINDOW_SIZE 的值来调整新流的初始窗口大小。 只能使用 WINDOW_UPDATE 帧更改连接流控制窗口。

在收到为 SETTINGS_INITIAL_WINDOW_SIZE 设置值的 SETTINGS 帧之前，端点在发送流控帧时只能使用默认的初始窗口大小。 类似地，连接流控制窗口被设置为默认的初始窗口大小，直到收到 WINDOW_UPDATE 帧。

除了更改尚未激活的流的流量控制窗口外，SETTINGS 帧还可以更改具有活动流量控制窗口的流的初始流量控制窗口大小（即，处于“打开”或“半”状态的流 -关闭（远程）”状态）。 当 SETTINGS_INITIAL_WINDOW_SIZE 的值改变时，接收者必须通过新值和旧值之间的差异来调整它维护的所有流流控制窗口的大小。

对 SETTINGS_INITIAL_WINDOW_SIZE 的更改可能导致流量控制窗口中的可用空间变为负值。 发送方必须跟踪负流量控制窗口并且不得发送新的流量控制帧，直到它收到导致流量控制窗口变为正的 WINDOW_UPDATE 帧。

例如，如果客户端在连接建立时立即发送 60 KB 并且服务器将初始窗口大小设置为 16 KB，则客户端将在收到 SETTINGS 帧时重新计算可用的流量控制窗口为 -44 KB。 客户端保留负流量控制窗口，直到 WINDOW_UPDATE 帧将窗口恢复为正，之后客户端可以恢复发送。

SETTINGS 框架不能改变连接流控制窗口。

端点必须将导致任何流控制窗口超过最大大小的 SETTINGS_INITIAL_WINDOW_SIZE 更改视为 FLOW_CONTROL_ERROR 类型的连接错误（第 5.4.1 节）。

6.9.3. Reducing the Stream Window Size
希望使用比当前大小更小的流量控制窗口的接收者可以发送一个新的 SETTINGS 帧。 但是，接收方必须准备好接收超过此窗口大小的数据，因为发送方可能会在处理 SETTINGS 帧之前发送超过下限的数据。

在发送减小初始流量控制窗口大小的设置帧后，接收方可以继续处理超过流量控制限制的流。 允许流继续不会允许接收方立即减少它为流量控制窗口保留的空间。 这些流的进展也可能停滞，因为需要 WINDOW_UPDATE 帧来允许发送方恢复发送。 接收方可以为受影响的流发送错误代码为 FLOW_CONTROL_ERROR 的 RST_STREAM。